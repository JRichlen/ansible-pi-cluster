---
- name: Deploy Kubernetes Cluster to Raspberry Pi Nodes
  hosts: ubuntu
  gather_facts: true
  become: true
  vars:
    kubernetes_version: "1.29"
    kubernetes_pod_network:
      cni: cilium
      cidr: "10.0.0.0/8"
    kubernetes_control_plane: ubuntu-1
    kubernetes_workers:
      - ubuntu-2
      - ubuntu-3
      - ubuntu-4
    kubernetes_feature_gates:
      - "GracefulNodeShutdown=true"
      - "GracefulNodeShutdownBasedOnPodPriority=true"

  pre_tasks:
    - name: Check if running on Ubuntu
      ansible.builtin.fail:
        msg: "This playbook is designed for Ubuntu systems only"
      when: ansible_distribution != "Ubuntu"

    - name: Check if running on ARM64
      ansible.builtin.debug:
        msg: "Architecture: {{ ansible_architecture }}"

    - name: Verify minimum Ubuntu version
      ansible.builtin.fail:
        msg: "Ubuntu 20.04 or newer required for Kubernetes {{ kubernetes_version }}"
      when: ansible_distribution_version is version('20.04', '<')

  tasks:
    # Phase 1: System Preparation
    - name: Update system packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: safe
        cache_valid_time: 3600

    - name: Install required system packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - iptables
          - arptables
          - ebtables
        state: present

    - name: Disable swap permanently
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^([^#].*\s+swap\s+.*)$'
        line: '# \1'
        backrefs: true
        backup: true
      notify: Turn off swap immediately

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]
          https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install containerd
      ansible.builtin.apt:
        name: containerd.io
        state: present
        update_cache: true

    - name: Generate containerd configuration
      ansible.builtin.shell:
        cmd: containerd config default > /etc/containerd/config.toml
        creates: /etc/containerd/config.toml

    - name: Configure containerd for systemd cgroup driver
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup = false'
        line: '            SystemdCgroup = true'
        backup: true
      notify: Restart containerd

    - name: Enable and start containerd
      ansible.builtin.systemd:
        name: containerd
        enabled: true
        state: started

    # Phase 3: Kubernetes Installation
    - name: Add Kubernetes GPG key
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key
        keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg
        state: present

    - name: Add Kubernetes repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
        state: present

    - name: Install Kubernetes packages
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: true

    - name: Hold Kubernetes packages at current version
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Configure kubelet for ARM64 and systemd
      ansible.builtin.lineinfile:
        path: /etc/default/kubelet
        line: 'KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --runtime-request-timeout=15m'
        create: true
        mode: '0644'
        backup: true
      notify: Restart kubelet

    - name: Enable kubelet service
      ansible.builtin.systemd:
        name: kubelet
        enabled: true

    # Phase 4: Control Plane Initialization (Master Node Only)
    - name: Check if Kubernetes is already initialized
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_admin_conf
      when: inventory_hostname == kubernetes_control_plane

    - name: Initialize Kubernetes control plane
      ansible.builtin.command:
        cmd: >-
          kubeadm init
          --pod-network-cidr={{ kubernetes_pod_network.cidr }}
          --apiserver-advertise-address={{ ansible_default_ipv4.address }}
          --feature-gates={{ kubernetes_feature_gates | join(',') }}
      register: kubeadm_init
      when:
        - inventory_hostname == kubernetes_control_plane
        - not k8s_admin_conf.stat.exists
      changed_when: kubeadm_init.rc == 0

    - name: Create .kube directory for ansible user
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      when: inventory_hostname == kubernetes_control_plane

    - name: Copy admin.conf to ansible user's kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: true
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        backup: true
      when: inventory_hostname == kubernetes_control_plane

    # Phase 5: Install CNI (Cilium)
    - name: Install Cilium CLI on control plane
      ansible.builtin.get_url:
        url: "https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-arm64.tar.gz"
        dest: "/tmp/cilium-cli.tar.gz"
        mode: '0644'
      when: inventory_hostname == kubernetes_control_plane

    - name: Extract Cilium CLI
      ansible.builtin.unarchive:
        src: "/tmp/cilium-cli.tar.gz"
        dest: "/usr/local/bin"
        remote_src: true
        creates: "/usr/local/bin/cilium"
        mode: '0755'
      when: inventory_hostname == kubernetes_control_plane

    - name: Install Cilium CNI
      ansible.builtin.command:
        cmd: >-
          /usr/local/bin/cilium install
          --set kubeProxyReplacement=strict
          --set k8sServiceHost={{ ansible_default_ipv4.address }}
          --set k8sServicePort=6443
          --set tunnel=disabled
          --set ipam.mode=kubernetes
          --set enableIPv4Masquerade=true
          --set nativeRoutingCIDR={{ kubernetes_pod_network.cidr }}
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become: false
      become_user: "{{ ansible_user }}"
      when:
        - inventory_hostname == kubernetes_control_plane
        - kubeadm_init is changed
      register: cilium_install
      changed_when: cilium_install.rc == 0

    - name: Wait for Cilium to be ready
      ansible.builtin.command:
        cmd: /usr/local/bin/cilium status --wait
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become: false
      become_user: "{{ ansible_user }}"
      when:
        - inventory_hostname == kubernetes_control_plane
        - cilium_install is changed
      register: cilium_status
      changed_when: false

    # Phase 6: Generate Worker Join Command
    - name: Generate join command for worker nodes
      ansible.builtin.command:
        cmd: kubeadm token create --print-join-command
      register: k8s_join_command
      when: inventory_hostname == kubernetes_control_plane
      changed_when: false

    - name: Store join command as fact
      ansible.builtin.set_fact:
        kubernetes_join_command: "{{ k8s_join_command.stdout }}"
      when: inventory_hostname == kubernetes_control_plane

    # Phase 7: Join Worker Nodes
    - name: Check if node is already joined to cluster
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf
      when: inventory_hostname in kubernetes_workers

    - name: Join worker nodes to cluster
      ansible.builtin.command:
        cmd: "{{ hostvars[kubernetes_control_plane].kubernetes_join_command }}"
      when:
        - inventory_hostname in kubernetes_workers
        - not kubelet_conf.stat.exists
        - hostvars[kubernetes_control_plane].kubernetes_join_command is defined
      register: join_result
      changed_when: join_result.rc == 0

    # Phase 8: Verification and Cleanup
    - name: Wait for all nodes to be ready
      ansible.builtin.command:
        cmd: kubectl get nodes --no-headers
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become: false
      become_user: "{{ ansible_user }}"
      register: kubectl_nodes
      until: kubectl_nodes.stdout_lines | length == (kubernetes_workers | length + 1)
      retries: 30
      delay: 10
      when: inventory_hostname == kubernetes_control_plane
      changed_when: false

    - name: Display cluster status
      ansible.builtin.command:
        cmd: kubectl get nodes -o wide
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become: false
      become_user: "{{ ansible_user }}"
      register: cluster_status
      when: inventory_hostname == kubernetes_control_plane
      changed_when: false

    - name: Show cluster information
      ansible.builtin.debug:
        var: cluster_status.stdout_lines
      when:
        - inventory_hostname == kubernetes_control_plane
        - cluster_status.stdout_lines is defined

    # Phase 9: Copy kubeconfig to control machine
    - name: Copy kubeconfig to local machine
      ansible.builtin.fetch:
        src: "/home/{{ ansible_user }}/.kube/config"
        dest: "{{ lookup('env', 'HOME') }}/.kube/pi-cluster-config"
        flat: true
      when: inventory_hostname == kubernetes_control_plane

    - name: Display success summary
      ansible.builtin.debug:
        msg:
          - "✅ Kubernetes {{ kubernetes_version }} cluster deployed successfully!"
          - "✅ Control plane: {{ kubernetes_control_plane }}"
          - "✅ Worker nodes: {{ kubernetes_workers | join(', ') }}"
          - "✅ Pod network: {{ kubernetes_pod_network.cni }} ({{ kubernetes_pod_network.cidr }})"
          - "✅ Advanced networking: eBPF-based with kube-proxy replacement"
          - "📋 Kubeconfig copied to: ~/.kube/pi-cluster-config"
          - "🔧 To use: export KUBECONFIG=~/.kube/pi-cluster-config"

  handlers:
    - name: Turn off swap immediately
      ansible.builtin.command:
        cmd: swapoff -a
      changed_when: false

    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted

    - name: Restart kubelet
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
