---
- name: Update System and Install Common Dependencies
  hosts: ubuntu
  gather_facts: true
  become: true
  vars:
    # Common packages to install - add more packages here as needed
    common_packages:
      - curl
      - wget
      - git
      - vim
      - nano
      - htop
      - tree
      - unzip
      - zip
      - build-essential
      - software-properties-common
      - apt-transport-https
      - ca-certificates
      - gnupg
      - lsb-release
      - net-tools
      - nmap
      - tmux
      - screen
      - fail2ban
      - ufw
      - python3
      - python3-pip
      - nodejs
      - npm

    # Snap packages (optional) - Currently disabled due to module dependency
    # snap_packages:
    #   - docker

    # Python packages to install via pip
    python_packages:
      - ansible
      - docker-compose

  tasks:
    - name: Update apt package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Upgrade all packages
      ansible.builtin.apt:
        upgrade: dist
        autoremove: true
        autoclean: true
      register: upgrade_result

    - name: Display upgrade results
      ansible.builtin.debug:
        msg: |
          Packages upgraded: {{ upgrade_result.changed }}
          {% if upgrade_result.changed %}
          Some packages were upgraded
          {% else %}
          System was already up to date
          {% endif %}

    - name: Install common packages
      ansible.builtin.apt:
        name: "{{ common_packages }}"
        state: present
      register: install_result

    - name: Display installed packages
      ansible.builtin.debug:
        msg: "Installed {{ common_packages | length }} common packages"

    # Snap packages installation - Currently disabled due to module dependency
    # - name: Install snap packages
    #   snap:
    #     name: "{{ item }}"
    #     state: present
    #   loop: "{{ snap_packages }}"
    #   ignore_errors: yes
    #   register: snap_result

    - name: Install Python packages via pip
      ansible.builtin.pip:
        name: "{{ python_packages }}"
        state: present
        executable: pip3
      failed_when: false
      register: pip_result

    - name: Enable and start fail2ban service
      ansible.builtin.systemd:
        name: fail2ban
        enabled: true
        state: started
      failed_when: false

    - name: Configure UFW firewall (allow SSH)
      community.general.ufw:
        rule: allow
        port: '22'
        proto: tcp
      failed_when: false

    - name: Enable UFW firewall
      community.general.ufw:
        state: enabled
        policy: deny
        direction: incoming
      failed_when: false

    - name: Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Display reboot status
      ansible.builtin.debug:
        msg: |
          {% if reboot_required.stat.exists %}
          REBOOT REQUIRED: System needs to be rebooted to complete updates
          {% else %}
          No reboot required
          {% endif %}

    - name: Gather final system information
      ansible.builtin.debug:
        msg: |
          Host: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Kernel: {{ ansible_kernel }}
          Available Memory: {{ ansible_memfree_mb }} MB
          Uptime: {{ (ansible_uptime_seconds | int / 86400) | round(1) }} days
