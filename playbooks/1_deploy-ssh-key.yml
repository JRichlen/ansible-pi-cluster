---
- name: Setup SSH Key Authentication and System Access
  hosts: ubuntu
  gather_facts: false  # We'll gather facts after we establish proper connection
  vars:
    # Path to your local SSH public key (control node)
    ssh_public_key_path: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"

    # Alternative key paths to try if the default doesn't exist (control node)
    alternative_key_paths:
      - "{{ lookup('env', 'HOME') }}/.ssh/id_ed25519.pub"
      - "{{ lookup('env', 'HOME') }}/.ssh/id_ecdsa.pub"

    # Connection settings
    max_retries: 3
    connection_timeout: 10

  tasks:
    # Phase 1: Test basic connectivity
    - name: Test basic connectivity (ensures host is reachable)
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        timeout: 30
      delegate_to: localhost
      register: basic_connectivity
      failed_when: false
      become: false

    - name: Skip host if unreachable
      ansible.builtin.meta: end_host
      when: basic_connectivity.failed

    - name: Debug basic connectivity result
      ansible.builtin.debug:
        msg: "✅ Basic connectivity to {{ inventory_hostname }} successful"

    # Phase 2: Test SSH key authentication (without password fallback)
    - name: Test SSH key authentication
      ansible.builtin.command:
        cmd: >-
          ssh -o BatchMode=yes -o PasswordAuthentication=no
          -o ConnectTimeout={{ connection_timeout }}
          {{ ansible_user }}@{{ inventory_hostname }} echo 'Key auth works'
      delegate_to: localhost
      register: initial_key_test
      failed_when: false
      become: false
      changed_when: false

    - name: Set SSH key authentication status
      ansible.builtin.set_fact:
        ssh_key_auth_working: "{{ initial_key_test.rc == 0 }}"

    - name: Debug initial SSH key test result
      ansible.builtin.debug:
        msg: |
          {% if ssh_key_auth_working %}
          ✅ SSH key authentication already working for {{ inventory_hostname }}
          {% else %}
          ⚠️  SSH key authentication not working for {{ inventory_hostname }},
          checking if we need to deploy keys
          {% endif %}

    # Phase 3: Find SSH key and prepare for deployment (only if needed)
    - name: Check if default SSH public key exists (SSH key auth not working)
      ansible.builtin.stat:
        path: "{{ ssh_public_key_path }}"
      delegate_to: localhost
      register: default_key_stat
      become: false
      when: not ssh_key_auth_working

    - name: Check alternative SSH public keys (SSH key auth not working)
      ansible.builtin.stat:
        path: "{{ item }}"
      delegate_to: localhost
      register: alt_key_stats
      loop: "{{ alternative_key_paths }}"
      become: false
      when: not ssh_key_auth_working and not default_key_stat.stat.exists

    - name: Determine which SSH key to use
      ansible.builtin.set_fact:
        ssh_key_to_deploy: >-
          {{ ssh_public_key_path if default_key_stat.stat.exists
          else (alt_key_stats.results | selectattr('stat.exists')
          | map(attribute='item') | first | default('')) }}
      when: not ssh_key_auth_working

    - name: Fail if no SSH public key found
      ansible.builtin.fail:
        msg: |
          ❌ No SSH public key found. Please generate one with:
          ssh-keygen -t ed25519 -C "your_email@example.com"
          or
          ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
      when: not ssh_key_auth_working and ssh_key_to_deploy == ""

    - name: Display which SSH key will be deployed
      ansible.builtin.debug:
        msg: "🔑 Using SSH key: {{ ssh_key_to_deploy }}"
      when: not ssh_key_auth_working

    - name: Read SSH public key content
      ansible.builtin.slurp:
        src: "{{ ssh_key_to_deploy }}"
      delegate_to: localhost
      register: ssh_key_content
      become: false
      when: not ssh_key_auth_working

    # Phase 4: Prompt for password only if SSH keys need to be deployed
    - name: Prompt for SSH/sudo password (only when needed)
      ansible.builtin.pause:
        prompt: |
          🔐 SSH Key authentication not working for {{ inventory_hostname }}
          Please enter SSH/sudo password for {{ ansible_user }}@\
          {{ inventory_hostname }}
          (Press Ctrl+C to skip this host)
        echo: false
        seconds: 300  # 5 minute timeout
      register: password_prompt
      when: not ssh_key_auth_working
      delegate_to: localhost
      run_once: false
      failed_when: false  # Don't fail if timeout occurs

    - name: Check if password was provided
      ansible.builtin.fail:
        msg: |
          ❌ No password provided for {{ inventory_hostname }}
          Skipping this host. SSH keys are required for automation.
      when: >-
        not ssh_key_auth_working and
        (password_prompt.user_input is not defined or
         password_prompt.user_input == "")
      failed_when: >-
        not ssh_key_auth_working and
        (password_prompt.user_input is not defined or
         password_prompt.user_input == "")

    - name: Skip host if no password provided
      ansible.builtin.meta: end_host
      when: >-
        not ssh_key_auth_working and
        (password_prompt.user_input is not defined or
         password_prompt.user_input == "")

    - name: Set ansible_password from prompt
      ansible.builtin.set_fact:
        ansible_password: "{{ password_prompt.user_input }}"
      when: >-
        not ssh_key_auth_working and
        password_prompt.user_input is defined and
        password_prompt.user_input != ""

    # Phase 5: Deploy SSH keys if needed
    - name: Deploy SSH key using password authentication
      when: not ssh_key_auth_working
      block:
        - name: Test password authentication is available
          ansible.builtin.shell:
            cmd: |
              sshpass -p "{{ ansible_password }}" ssh \
                -o ConnectTimeout={{ connection_timeout }} \
                -o PreferredAuthentications=password \
                -o PubkeyAuthentication=no \
                -o StrictHostKeyChecking=no \
                {{ ansible_user }}@{{ inventory_hostname }} \
                echo "Password auth available"
          delegate_to: localhost
          register: password_auth_test
          failed_when: false
          become: false
          changed_when: false

        - name: Fail if password authentication failed
          ansible.builtin.fail:
            msg: |
              ❌ Cannot connect to {{ inventory_hostname }}:
              - SSH key authentication is not working
              - Password authentication failed

              Please check:
              1. The password is correct
              2. SSH service is running on the target
              3. Password authentication is enabled on the target
          when: password_auth_test.rc != 0

        - name: Gather facts using password auth
          ansible.builtin.setup:
          vars:
            ansible_ssh_pass: "{{ ansible_password }}"
            ansible_ssh_extra_args: >-
              -o PreferredAuthentications=password
              -o PubkeyAuthentication=no

        - name: Ensure ~/.ssh directory exists
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/.ssh"
            state: directory
            mode: "0700"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          vars:
            ansible_ssh_pass: "{{ ansible_password }}"
            ansible_ssh_extra_args: >-
              -o PreferredAuthentications=password
              -o PubkeyAuthentication=no

        - name: Deploy SSH public key
          ansible.posix.authorized_key:
            user: "{{ ansible_user }}"
            state: present
            key: "{{ ssh_key_content.content | b64decode | trim }}"
            comment: "Deployed by Ansible on {{ ansible_date_time.date }}"
          vars:
            ansible_ssh_pass: "{{ ansible_password }}"
            ansible_ssh_extra_args: >-
              -o PreferredAuthentications=password
              -o PubkeyAuthentication=no

    # Phase 6: Verify SSH key authentication is now working
    - name: Re-test SSH key authentication after deployment
      ansible.builtin.command:
        cmd: >-
          ssh -o BatchMode=yes -o PasswordAuthentication=no
          -o ConnectTimeout={{ connection_timeout }}
          {{ ansible_user }}@{{ inventory_hostname }} echo "Key auth"
      delegate_to: localhost
      register: final_key_test
      retries: "{{ max_retries }}"
      delay: 2
      until: final_key_test.rc == 0
      failed_when: false
      become: false
      changed_when: false
      when: not ssh_key_auth_working

    - name: Update SSH key authentication status
      ansible.builtin.set_fact:
        ssh_key_auth_working: >-
          {{ final_key_test.rc == 0 if (final_key_test is defined and
          final_key_test.rc is defined) else ssh_key_auth_working }}

    - name: Display SSH key deployment result
      ansible.builtin.debug:
        msg: |
          {% if ssh_key_auth_working %}
          ✅ SSH key authentication now working for {{ inventory_hostname }}
          {% else %}
          ⚠️  WARNING: SSH key authentication still not working for
          {{ inventory_hostname }}
          Will continue with remaining tasks but will fail at the end if
          keys don't work
          {% endif %}

    # Phase 7: Ensure we can gather facts and continue
    - name: Gather facts using SSH keys (when working)
      ansible.builtin.setup:
      when: ssh_key_auth_working

    - name: Gather facts using password auth (when SSH keys not working)
      ansible.builtin.setup:
      vars:
        ansible_ssh_pass: "{{ ansible_password }}"
        ansible_ssh_extra_args: >-
          -o PreferredAuthentications=password -o PubkeyAuthentication=no
      when: not ssh_key_auth_working and ansible_password is defined

    # Phase 8: Configure system for automation (SSH keys working)
    - name: Configure passwordless sudo for ansible user (SSH keys)
      become: true
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/{{ ansible_user }}"
        content: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
        owner: root
        group: root
        mode: "0440"
      when: ssh_key_auth_working

    # Phase 8: Configure system for automation (password auth)
    - name: Configure passwordless sudo for ansible user (password)
      become: true
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/{{ ansible_user }}"
        content: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
        owner: root
        group: root
        mode: "0440"
      vars:
        ansible_ssh_pass: "{{ ansible_password }}"
        ansible_ssh_extra_args: >-
          -o PreferredAuthentications=password -o PubkeyAuthentication=no
      when: not ssh_key_auth_working and ansible_password is defined

    # Phase 9: Final validation - Fail if SSH keys are not working
    - name: Final SSH key authentication validation
      ansible.builtin.command:
        cmd: >-
          ssh -o BatchMode=yes -o PasswordAuthentication=no
          -o ConnectTimeout={{ connection_timeout }}
          {{ ansible_user }}@{{ inventory_hostname }} echo "Final validation"
      delegate_to: localhost
      register: final_validation
      failed_when: final_validation.rc != 0
      become: false
      changed_when: false

    - name: Update final SSH key status
      ansible.builtin.set_fact:
        ssh_key_auth_working: "{{ final_validation.rc == 0 }}"

    - name: Fail if SSH key authentication is not working after all attempts
      ansible.builtin.fail:
        msg: |
          ❌ SSH KEY DEPLOYMENT FAILED for {{ inventory_hostname }}

          SSH key authentication is not working after deployment attempts.
          This host cannot participate in future automation tasks that
          require SSH keys.
          Manual intervention required:
          1. Check if SSH key was properly deployed to
          ~/.ssh/authorized_keys
          2. Verify SSH service configuration allows key auth
          3. Check file permissions on ~/.ssh directory (700) and
          authorized_keys file (600)
          4. Test SSH key authentication manually:
             ssh -o BatchMode=yes {{ ansible_user }}@{{ inventory_hostname }}
          5. Check SSH server logs: sudo journalctl -u ssh

          Continuing to other hosts, but {{ inventory_hostname }} will be
          excluded from future automation.
      when: final_validation.rc != 0
      ignore_errors: false  # This will stop processing this host but continue

    # Phase 10: Final status report
    - name: Display final connection status
      ansible.builtin.debug:
        msg: |
          📊 Connection Status for {{ inventory_hostname }}:
          - Host: {{ inventory_hostname }}
          ({{ ansible_default_ipv4.address | default('unknown') }})
          - OS: {{ ansible_distribution }}
          {{ ansible_distribution_version }}
          - SSH Key Auth: {{ '✅ Working' if ssh_key_auth_working
          else '❌ FAILED' }}
          - Sudo: ✅ Configured (passwordless)
          - Ready for automation: {{ '✅ Yes' if ssh_key_auth_working
          else '❌ FAILED - SSH keys required' }}
