---
- name: Deploy SSH Keys, Configure Network, and System Access
  hosts: ubuntu
  gather_facts: true
  become: true
  vars:
    ssh_public_key_path: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"

  tasks:
    - name: Check if SSH public key exists
      ansible.builtin.stat:
        path: "{{ ssh_public_key_path }}"
      delegate_to: localhost
      register: ssh_key_check
      become: false

    - name: Fail if no SSH public key found
      ansible.builtin.fail:
        msg: |
          SSH public key not found at {{ ssh_public_key_path }}.
          Please generate one with: ssh-keygen -t rsa -b 4096
      when: not ssh_key_check.stat.exists

    - name: Read SSH public key content
      ansible.builtin.slurp:
        src: "{{ ssh_public_key_path }}"
      delegate_to: localhost
      register: ssh_public_key_content
      become: false
      delegate_facts: true

    - name: Ensure .ssh directory exists
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Deploy SSH public key
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        key: "{{ ssh_public_key_content.content | b64decode | trim }}"
        state: present
        comment: "Deployed via Ansible"

    - name: Configure passwordless sudo
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/{{ ansible_user }}
        line: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
        create: true
        mode: '0440'
        validate: 'visudo -cf %s'

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - vim
          - htop
          - git
          - python3-netaddr  # Required for ipaddr filter
        state: present

    - name: Test passwordless sudo
      ansible.builtin.command:
        cmd: sudo whoami
      register: sudo_test
      changed_when: false
      become: false

    - name: Display deployment summary
      ansible.builtin.debug:
        msg:
          - "✅ SSH key deployed successfully to {{ inventory_hostname }}"
          - "✅ Passwordless sudo configured for {{ ansible_user }}"
          - "✅ Essential packages installed"
          - "📡 Network configuration will be updated to static IP"

    # Phase: Network Configuration - Switch to Static IP for All Interfaces
    - name: Get current IP address and network information
      ansible.builtin.setup:
        filter: ansible_default_ipv4
      register: network_facts

    - name: Validate network configuration requirements
      ansible.builtin.fail:
        msg: >-
          Cannot configure static IP: missing network information
          (interface: {{ ansible_default_ipv4.interface | default('unknown') }},
          IP: {{ ansible_default_ipv4.address | default('unknown') }},
          Gateway: {{ ansible_default_ipv4.gateway | default('unknown') }})
      when:
        - ansible_default_ipv4.interface is undefined or
          ansible_default_ipv4.address is undefined or
          ansible_default_ipv4.gateway is undefined

    - name: Set network configuration with common /24 subnet
      ansible.builtin.set_fact:
        network_prefix: "{{ ansible_default_ipv4.address }}/24"

    - name: Get current netplan configuration files
      ansible.builtin.find:
        paths: /etc/netplan
        patterns: "*.yaml,*.yml"
      register: netplan_files

    - name: Backup existing netplan configurations
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ item.path }}.backup-{{ ansible_date_time.epoch }}"
        remote_src: true
        mode: '0644'
      loop: "{{ netplan_files.files }}"
      when: netplan_files.files | length > 0

    - name: Create static IP netplan configuration for all interfaces
      ansible.builtin.copy:
        content: |
          # Generated by Ansible - Static IP Configuration
          # This applies to primary physical interface only
          # Backup of original configs saved with .backup-<timestamp> extension
          network:
            version: 2
            renderer: networkd
            ethernets:
              {{ ansible_default_ipv4.interface }}:
                dhcp4: false
                dhcp6: false
                addresses:
                  - {{ network_prefix }}
                routes:
                  - to: default
                    via: {{ ansible_default_ipv4.gateway }}
                nameservers:
                  addresses:
                    - 8.8.8.8          # Google DNS Primary
                    - 1.1.1.1          # Cloudflare DNS Primary
                    - 8.8.4.4          # Google DNS Secondary
                    - 1.0.0.1          # Cloudflare DNS Secondary
                    - {{ ansible_default_ipv4.gateway }}  # Local gateway fallback
        dest: /etc/netplan/01-static-config.yaml
        mode: '0600'
        backup: true
      register: netplan_config
      notify: Apply netplan configuration

    - name: Remove old netplan configurations
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ netplan_files.files }}"
      when:
        - netplan_files.files | length > 0
        - item.path != '/etc/netplan/01-static-config.yaml'
      notify: Apply netplan configuration

    - name: Display network configuration summary
      ansible.builtin.debug:
        msg:
          - "✅ Network configuration updated for {{ inventory_hostname }}"
          - "📡 Primary Interface: {{ ansible_default_ipv4.interface }}"
          - "🌐 Static IP: {{ network_prefix }}"
          - "🚪 Gateway: {{ ansible_default_ipv4.gateway }}"
          - "🔍 DNS Servers: Google (8.8.8.8, 8.8.4.4), Cloudflare (1.1.1.1, 1.0.0.1), Gateway ({{ ansible_default_ipv4.gateway }})"
          - "📶 Scope: Primary interface ({{ ansible_default_ipv4.interface }}) - Other interfaces and Tailscale unaffected"
          - "⚠️  Network changes will take effect after netplan apply (triggered by handler)"

    # Phase: Master Node SSH Key Setup for Inter-Node Communication
    - name: Check if master node SSH key exists
      ansible.builtin.stat:
        path: "/home/{{ ansible_user }}/.ssh/id_rsa_cluster"
      register: master_key_check
      when: inventory_hostname == 'ubuntu-1'
      become: false

    - name: Generate SSH key pair on master node
      ansible.builtin.command:
        cmd: >-
          ssh-keygen -t rsa -b 4096
          -f /home/{{ ansible_user }}/.ssh/id_rsa_cluster
          -N ''
          -C "{{ ansible_user }}@{{ inventory_hostname }}-cluster-master"
      become: false
      when:
        - inventory_hostname == 'ubuntu-1'
        - not master_key_check.stat.exists
      register: key_generation
      changed_when: key_generation.rc == 0

    - name: Set proper permissions on master SSH keys
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - {path: "/home/{{ ansible_user }}/.ssh/id_rsa_cluster", mode: '0600'}
        - {path: "/home/{{ ansible_user }}/.ssh/id_rsa_cluster.pub",
           mode: '0644'}
      when:
        - inventory_hostname == 'ubuntu-1'
        - not master_key_check.stat.exists or key_generation is changed
      become: false

    - name: Read master node public key
      ansible.builtin.slurp:
        src: "/home/{{ ansible_user }}/.ssh/id_rsa_cluster.pub"
      register: master_public_key
      delegate_to: ubuntu-1
      become: false
      when: "'ubuntu-1' in groups['ubuntu']"
      run_once: true

    - name: Deploy master node public key to worker nodes
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        key: "{{ master_public_key.content | b64decode | trim }}"
        state: present
        comment: "Master node (ubuntu-1) key"
      when:
        - inventory_hostname != 'ubuntu-1'
        - master_public_key is defined
        - master_public_key.content is defined

    - name: Display master key deployment summary
      ansible.builtin.debug:
        msg:
          - "✅ Master node SSH key setup completed"
          - >-
            ✅ Worker node {{ inventory_hostname }} can now accept SSH
            from ubuntu-1
      when:
        - inventory_hostname != 'ubuntu-1'
        - master_public_key is defined

  handlers:
    - name: Apply netplan configuration
      ansible.builtin.command:
        cmd: netplan apply
      register: netplan_apply_result
      changed_when: netplan_apply_result.rc == 0
      notify: Wait for network to stabilize

    - name: Wait for network to stabilize
      ansible.builtin.pause:
        seconds: 10
